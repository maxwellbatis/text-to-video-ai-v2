import edge_tts
import os
import requests
import json
from typing import Optional, Dict, Any

# Configura√ß√£o das vozes ElevenLabs recomendadas
ELEVENLABS_VOICES = {
    # Vozes para fatos curiosos e document√°rios
    "james": {
        "voice_id": "pNInz6obpgDQGcFmaJgB",  # James - tom brit√¢nico calmo e profundo
        "description": "Tom brit√¢nico calmo e profundo, excelente para narrativas hist√≥ricas e curiosidades",
        "category": "curiosities"
    },
    "bill": {
        "voice_id": "pqHfZKP75Cgmzxl6c6pk",  # Bill - voz americana cl√°ssica
        "description": "Voz americana cl√°ssica, firme e clara ‚Äî muito usada em v√≠deos explicativos e documentais",
        "category": "curiosities"
    },
    "neil": {
        "voice_id": "piTKgcLEGmPE4e6mEKli",  # Neil - equilibrado e confi√°vel
        "description": "Equilibrado e confi√°vel, √≥timo para explica√ß√µes e coment√°rios informativos",
        "category": "curiosities"
    },
    "drew": {
        "voice_id": "21m00Tcm4TlvDq8ikWAM",  # Drew - calmo e ligeiramente m√≠stico
        "description": "Voz calma e ligeiramente m√≠stica, ideal para conte√∫do mais reflexivo ou filos√≥fico",
        "category": "reflection"
    },
    # Vozes para conte√∫do espiritual/b√≠blico
    "phillip": {
        "voice_id": "VR6AewLTigWG4xSOukaG",  # Phillip - Spiritual Sage
        "description": "Projetada para temas espirituais e de medita√ß√£o, com presen√ßa emocional e calma profunda",
        "category": "spiritual"
    },
    "deep_ray": {
        "voice_id": "pFZP5JQG7iQjIQuC4Bku",  # Deep Ray - Deep Voice of God
        "description": "Voz muito profunda e suave, perfeita para 'voz de Deus' em leituras b√≠blicas",
        "category": "spiritual"
    },
    "readwell": {
        "voice_id": "VR6AewLTigWG4xSOukaG",  # Readwell - Deep and Narrative
        "description": "Voz profunda e narrativa, perfeita para leituras dram√°ticas e conte√∫do envolvente",
        "category": "narrative"
    }
}

def detect_content_category(text: str) -> str:
    """
    Detecta a categoria do conte√∫do baseado no texto
    """
    text_lower = text.lower()
    
    # Palavras-chave para conte√∫do espiritual/b√≠blico
    spiritual_keywords = [
        'deus', 'jesus', 'b√≠blia', 'apocalipse', 'vers√≠culo', 'ora√ß√£o', 'f√©',
        'esp√≠rito', 'sagrado', 'profecia', 'malaquias', 'revela√ß√£o', 'salva√ß√£o',
        'igreja', 'religi√£o', 'espiritual', 'medita√ß√£o', 'alma', 'c√©u', 'inferno'
    ]
    
    # Palavras-chave para conte√∫do reflexivo/filos√≥fico
    reflection_keywords = [
        'por que', 'significado', 'filosofia', 'exist√™ncia', 'vida', 'morte',
        'pensamento', 'reflex√£o', 'contempla√ß√£o', 'mist√©rio', 'universo', 'consci√™ncia'
    ]
    
    # Verificar se √© conte√∫do espiritual
    for keyword in spiritual_keywords:
        if keyword in text_lower:
            return "spiritual"
    
    # Verificar se √© conte√∫do reflexivo
    for keyword in reflection_keywords:
        if keyword in text_lower:
            return "reflection"
    
    # Padr√£o: fatos curiosos/document√°rios
    return "curiosities"

def get_recommended_voice(content_category: str) -> str:
    """
    Retorna a voz recomendada baseada na categoria do conte√∫do
    """
    if content_category == "spiritual":
        return "readwell"  # Readwell para conte√∫do espiritual (deep and narrative)
    elif content_category == "reflection":
        return "drew"     # Drew para conte√∫do reflexivo
    else:
        return "james"    # James para fatos curiosos/document√°rios

async def generate_audio_elevenlabs(text: str, output_filename: str, voice_name: Optional[str] = None) -> bool:
    """
    Gera √°udio usando ElevenLabs
    """
    api_key = os.environ.get("ELEVENLABS_API_KEY")
    if not api_key:
        print("‚ö†Ô∏è ELEVENLABS_API_KEY n√£o configurada. Usando Edge TTS...")
        return False
    
    # Detectar categoria do conte√∫do se voz n√£o especificada
    if not voice_name:
        content_category = detect_content_category(text)
        voice_name = get_recommended_voice(content_category)
        print(f"üéØ Categoria detectada: {content_category} -> Voz: {voice_name}")
    
    if voice_name not in ELEVENLABS_VOICES:
        print(f"‚ö†Ô∏è Voz '{voice_name}' n√£o encontrada. Usando Edge TTS...")
        return False
    
    voice_config = ELEVENLABS_VOICES[voice_name]
    voice_id = voice_config["voice_id"]
    
    try:
        # Configura√ß√£o da API ElevenLabs
        url = f"https://api.elevenlabs.io/v1/text-to-speech/{voice_id}"
        
        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": api_key
        }
        
        # Configura√ß√µes de voz baseadas na categoria
        voice_settings = {
            "stability": 0.5,
            "similarity_boost": 0.75,
            "style": 0.0,
            "use_speaker_boost": True
        }
        
        # Ajustes espec√≠ficos por categoria
        if voice_config["category"] == "spiritual":
            voice_settings.update({
                "stability": 0.8,  # Mais est√°vel para conte√∫do solene
                "similarity_boost": 0.85,
                "style": 0.4  # Mais expressivo
            })
        elif voice_config["category"] == "narrative":
            voice_settings.update({
                "stability": 0.9,  # Muito est√°vel para narrativas
                "similarity_boost": 0.9,
                "style": 0.5  # Muito expressivo
            })
        elif voice_config["category"] == "reflection":
            voice_settings.update({
                "stability": 0.6,
                "similarity_boost": 0.7,
                "style": 0.2  # Moderadamente expressivo
            })
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",  # Modelo multil√≠ngue para portugu√™s
            "voice_settings": voice_settings
        }
        
        print(f"üé§ Gerando √°udio com ElevenLabs - Voz: {voice_name}")
        print(f"üìù Configura√ß√£o: {voice_config['description']}")
        
        response = requests.post(url, json=data, headers=headers)
        
        if response.status_code == 200:
            with open(output_filename, "wb") as f:
                f.write(response.content)
            print(f"‚úÖ √Åudio gerado com ElevenLabs: {output_filename}")
            return True
        else:
            print(f"‚ùå Erro na API ElevenLabs: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao gerar √°udio com ElevenLabs: {e}")
        return False

async def generate_audio(text: str, output_filename: str, voice_name: Optional[str] = None) -> None:
    """
    Gera √°udio usando ElevenLabs (se dispon√≠vel) ou Edge TTS como fallback
    """
    # Tentar ElevenLabs primeiro
    if await generate_audio_elevenlabs(text, output_filename, voice_name):
        return
    
    # Fallback para Edge TTS com retry autom√°tico
    print("üîÑ Usando Edge TTS como fallback...")
    
    max_retries = 3
    for attempt in range(max_retries):
        try:
            print(f"üé§ Tentativa {attempt + 1}/{max_retries} - Gerando √°udio com Edge TTS...")
            
            # Criar nova inst√¢ncia do Communicate para gerar novo token
            communicate = edge_tts.Communicate(text, "pt-BR-AntonioNeural", rate="-20%")
            await communicate.save(output_filename)
            
            print(f"‚úÖ √Åudio gerado com Edge TTS: {output_filename}")
            return
            
        except Exception as e:
            error_msg = str(e)
            print(f"‚ö†Ô∏è Tentativa {attempt + 1} falhou: {error_msg}")
            
            if "403" in error_msg or "Invalid response status" in error_msg:
                print("üîÑ Token expirado, tentando novamente...")
                # Aguardar um pouco antes da pr√≥xima tentativa
                import asyncio
                await asyncio.sleep(2)
                continue
            elif attempt == max_retries - 1:
                print(f"‚ùå Todas as tentativas falharam. Erro final: {e}")
                raise e
            else:
                print(f"üîÑ Tentando novamente em 1 segundo...")
                import asyncio
                await asyncio.sleep(1)
    
    print(f"‚ùå Falha ao gerar √°udio ap√≥s {max_retries} tentativas")

def list_available_voices() -> Dict[str, Any]:
    """
    Lista todas as vozes dispon√≠veis com suas descri√ß√µes
    """
    return {
        "voices": ELEVENLABS_VOICES,
        "categories": {
            "curiosities": ["james", "bill", "neil"],
            "reflection": ["drew"],
            "spiritual": ["phillip", "deep_ray"]
        },
        "recommendations": {
            "Fatos curiosos / Document√°rios": ["james", "bill", "neil"],
            "Reflex√£o / Mist√©rio / Filos√≥fico": ["drew"],
            "Conte√∫do religioso ou b√≠blico": ["readwell", "deep_ray"],
            "Narrativas dram√°ticas": ["readwell", "phillip"]
        }
    }