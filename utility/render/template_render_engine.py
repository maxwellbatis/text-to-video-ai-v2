#!/usr/bin/env python3
"""
Motor de Renderiza√ß√£o de Templates
Aplica configura√ß√µes de template ao v√≠deo final
"""

import os
import json
from typing import Dict, List, Optional
from moviepy.editor import AudioFileClip, CompositeVideoClip, CompositeAudioClip, VideoFileClip, TextClip
from moviepy.audio.fx.audio_normalize import audio_normalize
from moviepy.audio.fx.audio_loop import audio_loop

# Patch para compatibilidade com Pillow 10.x (ANTIALIAS foi removido)
try:
    from PIL import Image
    if not hasattr(Image, 'ANTIALIAS'):
        Image.ANTIALIAS = Image.Resampling.LANCZOS
except ImportError:
    pass

# Importar AssetManager
try:
    from utility.assets.asset_manager import asset_manager
    ASSETS_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è AssetManager n√£o dispon√≠vel - usando configura√ß√µes padr√£o")
    ASSETS_AVAILABLE = False

class TemplateRenderEngine:
    def __init__(self):
        self.templates = {}
    
    def apply_template_to_video(self, video_path: str, template_config: Dict, audio_path: str = None) -> str:
        """Aplica configura√ß√µes de template ao v√≠deo"""
        try:
            # Carregar v√≠deo
            video = VideoFileClip(video_path)
            
            # Aplicar configura√ß√µes espec√≠ficas do template
            template_id = template_config.get('template_id', 'default')
            
            if template_id == "vsl_magnetic":
                video = self._apply_vsl_magnetic_settings(video, template_config)
            else:
                # Aplicar configura√ß√µes visuais padr√£o
                video = self._apply_visual_settings(video, template_config.get('visual_settings', {}))
            
            # Aplicar configura√ß√µes de √°udio com assets
            if audio_path and os.path.exists(audio_path):
                video = self._apply_audio_settings_with_assets(video, audio_path, template_config)
            
            # Aplicar efeitos visuais com assets
            video = self._apply_effects_with_assets(video, template_config)
            
            # Salvar v√≠deo processado
            output_path = f"template_processed_{os.path.basename(video_path)}"
            video.write_videofile(output_path, codec='libx264', audio_codec='aac')
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå Erro ao aplicar template: {e}")
            return video_path
    
    def _apply_vsl_magnetic_settings(self, video: VideoFileClip, template_config: Dict) -> VideoFileClip:
        """Aplica configura√ß√µes espec√≠ficas do template VSL magn√©tico"""
        try:
            print("üé¨ Aplicando configura√ß√µes VSL Magn√©tico...")
            
            # Configura√ß√µes do template VSL
            visual_settings = template_config.get('visual_settings', {})
            
            # Redimensionar para formato vertical (720x1280)
            target_width = 720
            target_height = 1280
            
            # Calcular propor√ß√£o para manter aspecto
            current_width, current_height = video.size
            aspect_ratio = current_width / current_height
            
            if aspect_ratio > 1:  # V√≠deo horizontal
                # Cortar para formato vertical
                new_width = int(current_height * (9/16))  # Propor√ß√£o 9:16
                crop_x = (current_width - new_width) // 2
                video = video.crop(x1=crop_x, y1=0, x2=crop_x + new_width, y2=current_height)
            
            # Redimensionar para 720x1280
            video = video.resize((target_width, target_height))
            
            print(f"‚úÖ V√≠deo redimensionado para {target_width}x{target_height}")
            
            # Aplicar efeitos visuais espec√≠ficos do VSL
            video = self._apply_vsl_visual_effects(video, visual_settings)
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar configura√ß√µes VSL: {e}")
            return video
    
    def _apply_vsl_visual_effects(self, video: VideoFileClip, visual_settings: Dict) -> VideoFileClip:
        """Aplica efeitos visuais espec√≠ficos do VSL"""
        try:
            # Aplicar efeitos de transi√ß√£o din√¢micos
            if visual_settings.get('transition_effects'):
                video = self._apply_vsl_transitions(video, visual_settings['transition_effects'])
            
            # Aplicar efeitos de texto se especificados
            text_style = visual_settings.get('text_style', {})
            if text_style:
                video = self._apply_vsl_text_effects(video, text_style)
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar efeitos visuais VSL: {e}")
            return video
    
    def _apply_vsl_transitions(self, video: VideoFileClip, transitions: List[str]) -> VideoFileClip:
        """Aplica transi√ß√µes espec√≠ficas do VSL"""
        try:
            # Transi√ß√µes r√°pidas e din√¢micas para VSL
            if 'fast_cuts' in transitions:
                # Implementar cortes r√°pidos
                print("üé¨ Aplicando cortes r√°pidos VSL")
            
            if 'zoom_effects' in transitions:
                # Implementar efeitos de zoom
                print("üé¨ Aplicando efeitos de zoom VSL")
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar transi√ß√µes VSL: {e}")
            return video
    
    def _apply_vsl_text_effects(self, video: VideoFileClip, text_style: Dict) -> VideoFileClip:
        """Aplica efeitos de texto espec√≠ficos do VSL"""
        try:
            # Efeitos de texto para VSL (palavras-chave destacadas, etc.)
            font = text_style.get('font', 'Impact')
            font_size = text_style.get('font_size', 120)
            stroke_width = text_style.get('stroke_width', 10)
            
            print(f"üé¨ Configura√ß√µes de texto VSL: {font}, {font_size}px, stroke {stroke_width}")
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar efeitos de texto VSL: {e}")
            return video
    
    def _apply_visual_settings(self, video: VideoFileClip, visual_settings: Dict) -> VideoFileClip:
        """Aplica configura√ß√µes visuais do template"""
        try:
            # Aplicar resolu√ß√£o se especificada
            if 'resolution' in visual_settings:
                width, height = map(int, visual_settings['resolution'].split('x'))
                # Usar m√©todo de redimensionamento compat√≠vel
                try:
                    video = video.resize((width, height))
                except AttributeError:
                    # Fallback para vers√µes mais antigas do PIL
                    video = video.resize((width, height), resample='bicubic')
            
            # Aplicar efeitos de transi√ß√£o
            if 'transition_effects' in visual_settings:
                video = self._apply_transitions(video, visual_settings['transition_effects'])
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar configura√ß√µes visuais: {e}")
            return video
    
    def _apply_audio_settings_with_assets(self, video: VideoFileClip, audio_path: str, template_config: Dict) -> VideoFileClip:
        """Aplica configura√ß√µes de √°udio com assets do template"""
        try:
            # Carregar √°udio principal
            audio = AudioFileClip(audio_path)
            print(f"üéµ √Åudio principal carregado: {os.path.basename(audio_path)}")
            
            # Obter assets para o template
            template_id = template_config.get('template_id', 'default')
            background_music_choice = template_config.get('background_music')
            print(f"üéµ Aplicando √°udio para template: {template_id}")
            if background_music_choice:
                print(f"üéµ M√∫sica de fundo escolhida: {background_music_choice}")
            
            if ASSETS_AVAILABLE:
                assets = asset_manager.get_assets_for_template(template_id, background_music_choice)
                print(f"üéµ Assets de √°udio encontrados: {list(assets.keys())}")
                
                # Adicionar m√∫sica de fundo
                if assets.get('background_music') and os.path.exists(assets['background_music']):
                    print(f"üéµ Tentando aplicar m√∫sica de fundo: {assets['background_music']}")
                    try:
                        bg_music = AudioFileClip(assets['background_music'])
                        # Loop da m√∫sica de fundo para cobrir toda a dura√ß√£o
                        bg_music = audio_loop(bg_music, duration=audio.duration)
                        # Volume aumentado para melhor audibilidade
                        bg_music = bg_music.volumex(0.3)
                        
                        # Combinar √°udio principal com m√∫sica de fundo
                        audio = CompositeAudioClip([audio, bg_music])
                        print(f"‚úÖ M√∫sica de fundo aplicada: {os.path.basename(assets['background_music'])}")
                    except Exception as e:
                        print(f"‚ùå Erro ao aplicar m√∫sica de fundo: {e}")
                else:
                    print(f"‚ö†Ô∏è M√∫sica de fundo n√£o encontrada ou n√£o existe")
                
                # Adicionar efeitos sonoros
                audio_clips = [audio]
                
                # Efeito de tens√£o
                if assets.get('tension_effect') and os.path.exists(assets['tension_effect']):
                    print(f"üéµ Tentando aplicar efeito de tens√£o: {assets['tension_effect']}")
                    try:
                        tension = AudioFileClip(assets['tension_effect'])
                        tension = tension.volumex(0.5)
                        audio_clips.append(tension)
                        print(f"‚úÖ Efeito de tens√£o aplicado: {os.path.basename(assets['tension_effect'])}")
                    except Exception as e:
                        print(f"‚ùå Erro ao aplicar efeito de tens√£o: {e}")
                else:
                    print(f"‚ö†Ô∏è Efeito de tens√£o n√£o encontrado ou n√£o existe")
                
                # Efeito de impacto
                if assets.get('impact_effect') and os.path.exists(assets['impact_effect']):
                    print(f"üéµ Tentando aplicar efeito de impacto: {assets['impact_effect']}")
                    try:
                        impact = AudioFileClip(assets['impact_effect'])
                        impact = impact.volumex(0.4)
                        audio_clips.append(impact)
                        print(f"‚úÖ Efeito de impacto aplicado: {os.path.basename(assets['impact_effect'])}")
                    except Exception as e:
                        print(f"‚ùå Erro ao aplicar efeito de impacto: {e}")
                else:
                    print(f"‚ö†Ô∏è Efeito de impacto n√£o encontrado ou n√£o existe")
                
                if len(audio_clips) > 1:
                    print(f"üéµ Combinando {len(audio_clips)} clips de √°udio")
                    audio = CompositeAudioClip(audio_clips)
                else:
                    print(f"‚ö†Ô∏è Nenhum efeito de √°udio aplicado")
            else:
                print(f"‚ö†Ô∏è AssetManager n√£o dispon√≠vel")
            
            # Normalizar √°udio final
            try:
                audio = audio_normalize(audio)
            except AttributeError:
                # CompositeAudioClip n√£o tem atributo fps, pular normaliza√ß√£o
                print("‚ö†Ô∏è Pulando normaliza√ß√£o do √°udio (CompositeAudioClip)")
            
            # Combinar √°udio com v√≠deo
            video = video.set_audio(audio)
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar configura√ß√µes de √°udio com assets: {e}")
            import traceback
            traceback.print_exc()
            return video
    
    def _apply_transitions(self, video: VideoFileClip, transitions: List[str]) -> VideoFileClip:
        """Aplica efeitos de transi√ß√£o"""
        try:
            # Implementar transi√ß√µes b√°sicas
            if 'fade_in' in transitions:
                video = video.fadein(1.0)
            if 'fade_out' in transitions:
                video = video.fadeout(1.0)
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar transi√ß√µes: {e}")
            return video
    
    def _apply_audio_effects(self, audio: AudioFileClip, effects_config: Dict) -> AudioFileClip:
        """Aplica efeitos de √°udio"""
        try:
            # Aplicar volume de efeitos
            if 'volume' in effects_config:
                audio = audio.volumex(effects_config['volume'])
            
            return audio
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar efeitos de √°udio: {e}")
            return audio
    
    def _apply_effects_with_assets(self, video: VideoFileClip, template_config: Dict) -> VideoFileClip:
        """Aplica efeitos visuais com assets do template"""
        try:
            template_id = template_config.get('template_id', 'default')
            print(f"üé¨ Aplicando efeitos visuais para template: {template_id}")
            
            if ASSETS_AVAILABLE:
                assets = asset_manager.get_assets_for_template(template_id)
                print(f"üìã Assets encontrados: {list(assets.keys())}")
                video_clips = [video]
                
                # Adicionar overlay de filme antigo
                if assets.get('film_overlay') and os.path.exists(assets['film_overlay']):
                    print(f"üé¨ Tentando aplicar overlay de filme: {assets['film_overlay']}")
                    try:
                        overlay = VideoFileClip(assets['film_overlay'])
                        overlay = overlay.resize(video.size)
                        overlay = overlay.set_duration(video.duration)
                        overlay = overlay.set_opacity(0.3)  # 30% de opacidade
                        video_clips.append(overlay)
                        print(f"‚úÖ Overlay de filme aplicado: {os.path.basename(assets['film_overlay'])}")
                    except Exception as e:
                        print(f"‚ùå Erro ao aplicar overlay de filme: {e}")
                else:
                    print(f"‚ö†Ô∏è Overlay de filme n√£o encontrado ou n√£o existe")
                
                # Adicionar light leak
                if assets.get('light_leak') and os.path.exists(assets['light_leak']):
                    print(f"üé¨ Tentando aplicar light leak: {assets['light_leak']}")
                    try:
                        light_leak = VideoFileClip(assets['light_leak'])
                        light_leak = light_leak.resize(video.size)
                        light_leak = light_leak.set_duration(video.duration)
                        light_leak = light_leak.set_opacity(0.2)  # 20% de opacidade
                        video_clips.append(light_leak)
                        print(f"‚úÖ Light leak aplicado: {os.path.basename(assets['light_leak'])}")
                    except Exception as e:
                        print(f"‚ùå Erro ao aplicar light leak: {e}")
                else:
                    print(f"‚ö†Ô∏è Light leak n√£o encontrado ou n√£o existe")
                
                if len(video_clips) > 1:
                    print(f"üé¨ Combinando {len(video_clips)} clips de v√≠deo")
                    video = CompositeVideoClip(video_clips)
                else:
                    print(f"‚ö†Ô∏è Nenhum efeito visual aplicado")
            else:
                print(f"‚ö†Ô∏è AssetManager n√£o dispon√≠vel")
            
            return video
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao aplicar efeitos visuais com assets: {e}")
            import traceback
            traceback.print_exc()
            return video
    
    def apply_strategic_pauses(self, audio_file_path: str, pauses_config: Dict) -> str:
        """Aplica pausas estrat√©gicas ao √°udio"""
        try:
            # Carregar √°udio
            audio = AudioFileClip(audio_file_path)
            
            # Configura√ß√µes de pausas
            pause_duration = pauses_config.get('duration', 2.0)
            pause_count = pauses_config.get('count', 3)
            
            # Dividir √°udio em segmentos
            total_duration = audio.duration
            segment_duration = total_duration / (pause_count + 1)
            
            # Criar segmentos de √°udio
            audio_segments = []
            for i in range(pause_count + 1):
                start_time = i * segment_duration
                end_time = (i + 1) * segment_duration
                
                segment = audio.subclip(start_time, end_time)
                audio_segments.append(segment)
                
                # Adicionar pausa (exceto ap√≥s o √∫ltimo segmento)
                if i < pause_count:
                    silence = AudioFileClip(audio_file_path).subclip(0, pause_duration).volumex(0)
                    audio_segments.append(silence)
            
            # Combinar segmentos
            from moviepy.editor import concatenate_audioclips
            final_audio = concatenate_audioclips(audio_segments)
            
            # Salvar √°udio com pausas
            output_path = f"paused_{audio_file_path}"
            final_audio.write_audiofile(output_path, verbose=False, logger=None)
            
            return output_path
            
        except Exception as e:
            print(f"‚ùå Erro ao aplicar pausas estrat√©gicas: {e}")
            return audio_file_path 