import os
from openai import OpenAI
import json

# Carregar vari√°veis de ambiente do arquivo .env
def load_env():
    try:
        with open('.env', 'r') as f:
            for line in f:
                if '=' in line:
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
    except FileNotFoundError:
        pass

load_env()

client = None
model = None

# Verificar se GROQ_API_KEY est√° dispon√≠vel e tem tamanho adequado
groq_key = os.environ.get("GROQ_API_KEY")
if groq_key and len(groq_key) > 30:
    try:
        from groq import Groq
        model = "llama3-70b-8192"
        client = Groq(api_key=groq_key)
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar Groq: {e}")
        client = None
elif os.environ.get("OPENAI_KEY"):
    try:
        model = "gpt-4o"
        client = OpenAI(api_key=os.environ.get("OPENAI_KEY"))
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao inicializar OpenAI: {e}")
        client = None
else:
    print("‚ö†Ô∏è Nenhuma API key configurada")
    client = None

def generate_script(topic, duration_minutes=1):
    """
    Gera script para v√≠deos de 1-10 minutos
    duration_minutes: dura√ß√£o desejada em minutos (1-10)
    """
    
    # Calcular palavras baseado na dura√ß√£o (aproximadamente 150 palavras por minuto)
    target_words = int(duration_minutes * 150)
    
    # Determinar estrutura baseada na dura√ß√£o
    if duration_minutes <= 2:
        structure_type = "short"
        opening_duration = "10-20 segundos"
        development_duration = f"{int((duration_minutes * 60) - 30)} segundos"
        closing_duration = "10-15 segundos"
    elif duration_minutes <= 5:
        structure_type = "medium"
        opening_duration = "15-30 segundos"
        development_duration = f"{int((duration_minutes * 60) - 45)} segundos"
        closing_duration = "15-20 segundos"
    else:
        structure_type = "long"
        opening_duration = "20-40 segundos"
        development_duration = f"{int((duration_minutes * 60) - 60)} segundos"
        closing_duration = "20-30 segundos"

    prompt = (
        f"""Voc√™ √© um escritor experiente especializado em criar roteiros para v√≠deos de {duration_minutes} minuto(s) (aproximadamente {target_words} palavras) com estrutura profissional e narrativa envolvente.

        IMPORTANTE: Sempre responda em PORTUGU√äS BRASILEIRO.

        üé¨ ESTRUTURA PROFISSIONAL PARA V√çDEOS DE {duration_minutes} MINUTO(S):

        ‚úÖ ABERTURA ({opening_duration}):
        - Sauda√ß√£o calorosa e acolhedora
        - Frase impactante, pergunta intrigante ou cita√ß√£o relevante
        - Contextualiza√ß√£o do tema principal
        - Exemplo: "A paz do Senhor! Hoje vamos refletir sobre {topic}. Voc√™ j√° se perguntou..."

        ‚úÖ DESENVOLVIMENTO ({development_duration}):
        - Apresenta√ß√£o do tema principal com clareza
        - M√∫ltiplos pontos de desenvolvimento (3-7 pontos principais)
        - Exemplos pr√°ticos da vida cotidiana
        - Reflex√µes profundas ou insights valiosos
        - Pausas estrat√©gicas para reflex√£o
        - Transi√ß√µes suaves entre os t√≥picos
        - Para ora√ß√µes: momentos de sil√™ncio e contempla√ß√£o

        ‚úÖ FECHAMENTO ({closing_duration}):
        - Resumo dos pontos principais
        - Conclus√£o com ensinamento ou chamada √† a√ß√£o
        - Convite √† intera√ß√£o: "Deixe seu coment√°rio, compartilhe com algu√©m que precisa ouvir isso"
        - Mensagem inspiradora ou motivacional
        - Para ora√ß√µes: momento final de gratid√£o e b√™n√ß√£o

        üéôÔ∏è TOM DE VOZ E ESTILO:
        - Para conte√∫do espiritual: Solene, pausado, com rever√™ncia e empatia
        - Para ora√ß√µes: Calmo, contemplativo, com momentos de sil√™ncio
        - Para curiosidades: Acolhedor, leve, conversacional e envolvente
        - Para reflex√µes: Calmo, filos√≥fico, contemplativo
        - Para chamadas √† a√ß√£o: Inspirador, encorajador, com emo√ß√£o

        üìù EXEMPLOS DE ESTRUTURA:

        Para ora√ß√£o de {duration_minutes} minuto(s):
        "A paz do Senhor! Vamos juntos neste momento de ora√ß√£o e reflex√£o sobre {topic}.
        [Desenvolvimento com m√∫ltiplos pontos, momentos de sil√™ncio, vers√≠culos b√≠blicos]
        Senhor, agradecemos por este momento. Que Sua paz esteja conosco. Am√©m.
        Deixe seu coment√°rio, compartilhe com algu√©m que precisa ouvir isso!"

        Para estudo b√≠blico de {duration_minutes} minuto(s):
        "A paz do Senhor! Hoje vamos estudar juntos sobre {topic}.
        [Desenvolvimento com vers√≠culos, explica√ß√µes, aplica√ß√µes pr√°ticas]
        Que este estudo aben√ßoe sua vida e fortale√ßa sua f√©.
        Deixe seu coment√°rio, compartilhe com algu√©m que precisa ouvir isso!"

        Para curiosidades de {duration_minutes} minuto(s):
        "Voc√™ sabia que [curiosidade impactante]? 
        [Desenvolvimento com m√∫ltiplos fatos, explica√ß√µes detalhadas, exemplos]
        O mundo est√° cheio de surpresas incr√≠veis! 
        Deixe seu coment√°rio, compartilhe com algu√©m que precisa ouvir isso!"

        REGRAS IMPORTANTES:
        1. SEMPRE use PORTUGU√äS BRASILEIRO
        2. Mantenha o conte√∫do em aproximadamente {target_words} palavras ({duration_minutes} minuto(s))
        3. Inclua pausas estrat√©gicas para reflex√£o (marcadas com [...])
        4. Use linguagem acess√≠vel mas respeitosa
        5. Crie conex√£o emocional com o espectador
        6. Termine sempre com uma chamada √† a√ß√£o positiva
        7. Para ora√ß√µes: inclua momentos de sil√™ncio e contempla√ß√£o
        8. Para estudos longos: divida em se√ß√µes claras com transi√ß√µes

        Forne√ßa estritamente o roteiro em formato JSON como abaixo, e apenas forne√ßa um objeto JSON analis√°vel com a chave 'script'.

        # Sa√≠da
        {{"script": "Aqui est√° o roteiro completo seguindo a estrutura profissional..."}}
        """
    )

    response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": topic}
            ]
        )
    content = response.choices[0].message.content
    try:
        # Limpar caracteres de controle e quebras de linha
        content = content.replace('\n', ' ').replace('\r', ' ')
        # Remover aspas duplas extras que podem causar problemas
        content = content.replace('""', '"')
        script = json.loads(content)["script"]
    except Exception as e:
        # Tentar extrair JSON da resposta
        json_start_index = content.find('{')
        json_end_index = content.rfind('}')
        if json_start_index != -1 and json_end_index != -1:
            content = content[json_start_index:json_end_index+1]
            content = content.replace('\n', ' ').replace('\r', ' ')
            content = content.replace('""', '"')
            try:
                script = json.loads(content)["script"]
            except:
                # Se ainda falhar, retornar o conte√∫do limpo
                script = content.replace('{"script": "', '').replace('"}', '')
        else:
            # Se n√£o encontrar JSON, retornar o conte√∫do como est√°
            script = content
    return script

def generate_prayer_script(topic, duration_minutes=3):
    """
    Gera script espec√≠fico para ora√ß√µes
    """
    target_words = int(duration_minutes * 120)  # Menos palavras para ora√ß√µes (mais pausas)
    
    prompt = (
        f"""Voc√™ √© um escritor especializado em criar roteiros para ora√ß√µes de {duration_minutes} minuto(s) (aproximadamente {target_words} palavras).

        IMPORTANTE: Sempre responda em PORTUGU√äS BRASILEIRO.

        üôè ESTRUTURA PARA ORA√á√ÉO DE {duration_minutes} MINUTO(S):

        ‚úÖ ABERTURA (10-20 segundos):
        - Sauda√ß√£o espiritual: "A paz do Senhor! Vamos juntos neste momento de ora√ß√£o"
        - Contextualiza√ß√£o do tema da ora√ß√£o
        - Prepara√ß√£o do cora√ß√£o para o momento espiritual

        ‚úÖ DESENVOLVIMENTO ({int((duration_minutes * 60) - 40)} segundos):
        - Ora√ß√£o de adora√ß√£o e gratid√£o
        - Ora√ß√£o espec√≠fica sobre o tema
        - Momentos de sil√™ncio e contempla√ß√£o (marcados com [...])
        - Vers√≠culos b√≠blicos relevantes
        - Ora√ß√£o de intercess√£o
        - Ora√ß√£o de peti√ß√£o pessoal

        ‚úÖ FECHAMENTO (10-20 segundos):
        - Ora√ß√£o de gratid√£o
        - B√™n√ß√£o final
        - "Am√©m"
        - Convite √† intera√ß√£o

        üéôÔ∏è CARACTER√çSTICAS ESPEC√çFICAS PARA ORA√á√ïES:
        - Tom solene e reverente
        - Pausas frequentes para contempla√ß√£o
        - Linguagem espiritual e b√≠blica
        - Momentos de sil√™ncio marcados com [...]
        - Estrutura de ora√ß√£o tradicional (adora√ß√£o, confiss√£o, gratid√£o, peti√ß√£o)

        üìù EXEMPLO DE ESTRUTURA:

        "A paz do Senhor! Vamos juntos neste momento de ora√ß√£o sobre {topic}.
        
        Senhor, n√≥s Te adoramos e Te louvamos por quem Tu √©s. [...]
        
        Pai, hoje queremos orar especificamente sobre {topic}. [...]
        
        [Vers√≠culo b√≠blico relevante]
        
        Senhor, Te pedimos que [peti√ß√£o espec√≠fica]. [...]
        
        Agradecemos por este momento, Senhor. Que Sua paz esteja conosco. Am√©m.
        
        Deixe seu coment√°rio, compartilhe com algu√©m que precisa ouvir isso!"

        REGRAS IMPORTANTES:
        1. SEMPRE use PORTUGU√äS BRASILEIRO
        2. Mantenha o conte√∫do em aproximadamente {target_words} palavras
        3. Inclua momentos de sil√™ncio marcados com [...]
        4. Use linguagem espiritual e reverente
        5. Estrutura tradicional de ora√ß√£o
        6. Termine com "Am√©m" e chamada √† a√ß√£o

        Forne√ßa estritamente o roteiro em formato JSON como abaixo, e apenas forne√ßa um objeto JSON analis√°vel com a chave 'script'.

        # Sa√≠da
        {{"script": "Aqui est√° o roteiro de ora√ß√£o completo..."}}
        """
    )

    response = client.chat.completions.create(
            model=model,
            messages=[
                {"role": "system", "content": prompt},
                {"role": "user", "content": topic}
            ]
        )
    content = response.choices[0].message.content
    try:
        content = content.replace('\n', ' ').replace('\r', ' ')
        content = content.replace('""', '"')
        script = json.loads(content)["script"]
    except Exception as e:
        json_start_index = content.find('{')
        json_end_index = content.rfind('}')
        if json_start_index != -1 and json_end_index != -1:
            content = content[json_start_index:json_end_index+1]
            content = content.replace('\n', ' ').replace('\r', ' ')
            content = content.replace('""', '"')
            try:
                script = json.loads(content)["script"]
            except:
                script = content.replace('{"script": "', '').replace('"}', '')
        else:
            script = content
    return script
